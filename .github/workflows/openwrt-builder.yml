#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_commit_id:
        description: 'LEAN Openwrt Commit ID to checkout'
        required: false
        default: '1afbdb8'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CURRENT_BRANCH: ${{ github.ref_name }}  # 添加当前分支变量
  OPENWRT_COMMIT_ID: ${{ github.event.inputs.openwrt_commit_id }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Move /home/runner/ to /mnt/ and create symlink
      run: |
        sudo mv /home/runner /mnt/
        sudo ln -s /mnt/runner /home/runner

    - name: Checkout
      uses: actions/checkout@main

    - name: Setup Environment and Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Setting up Environment and Dependencies..."
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

        # 在/mnt下创建workdir以使用更大的磁盘空间
        sudo mkdir -p /mnt/workdir
        sudo ln -s /mnt/workdir /workdir
        sudo chown $USER:$GROUPS /mnt/workdir

        sudo pip install packaging
        echo "Checking Disk Space..."
        df -hT
        echo "Checking working directory location:"
        ls -la /workdir
        echo "Checking GCC version..."
        gcc --version
        echo "Checking CPU details..."
        lscpu

    - name: Clone openwrt source code
      working-directory: /workdir
      run: |
        git clone $REPO_URL openwrt
        cd openwrt
        # 检查是否指定了 commit ID，如果没有，则使用当前分支的最新 commit ID
        if [ -z "${{ env.OPENWRT_COMMIT_ID }}" ]; then
          echo "No commit ID specified, using latest commit from branch: $REPO_BRANCH"
          LATEST_COMMIT=$(git rev-parse HEAD)
          echo "OPENWRT_COMMIT_ID=$LATEST_COMMIT" >> $GITHUB_ENV
          git checkout $REPO_BRANCH
        else
          echo "Commit ID specified: ${{ env.OPENWRT_COMMIT_ID }}, checking out..."
          git fetch --all
          git checkout ${{ env.OPENWRT_COMMIT_ID }}
        fi
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache OpenWrt build directories
      uses: actions/cache@v4
      with:
        path: |
          $GITHUB_WORKSPACE/openwrt/build_dir
          $GITHUB_WORKSPACE/openwrt/staging_dir
          $GITHUB_WORKSPACE/openwrt/dl
        key: ${{ runner.os }}-openwrt-${{ env.OPENWRT_COMMIT_ID }}-${{ hashFiles('**/feeds.conf', '**/.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-${{ env.OPENWRT_COMMIT_ID }}-
          ${{ runner.os }}-openwrt-

    - name: Load custom feeds/drivers
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        mkdir -p $GITHUB_WORKSPACE/drivers/;mkdir -p openwrt/package/kernel/drivers/
        mv $GITHUB_WORKSPACE/drivers/* openwrt/package/kernel/ || true
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        # 检查.config文件是否存在，不存在则报错终止构建
        if [ ! -e $CONFIG_FILE ]; then
          echo "ERROR: .config file not found in branch ${{ github.ref_name }}"
          echo "Each device branch must have its own .config file"
          echo "Please restore .config file or generate one using 'make menuconfig'"
          exit 1
        fi
        [ -e files ] && mv files openwrt/files
        mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Preinstall clash core
      run: |
        cd openwrt

        ls -l feeds/small/luci-app-openclash || true
        mkdir -p files/etc/openclash/core/

        # 根据 GitHub 分支下载不同架构的 Clash 核心
        CLASH_CORE_URL=""
        if [ "${{ github.ref_name }}" == "x86" ]; then
          CLASH_CORE_URL="https://raw.githubusercontent.com/vernesong/OpenClash/core/master/meta/clash-linux-amd64.tar.gz"
        elif [[ "${{ github.ref_name }}" == *"r5s"* ]]; then
          # r5s和r5s-*变体分支使用arm64核心
          CLASH_CORE_URL="https://raw.githubusercontent.com/vernesong/OpenClash/core/master/meta/clash-linux-arm64.tar.gz"
        else
          # 其他ARM64设备（r2s, r68s等）
          CLASH_CORE_URL="https://raw.githubusercontent.com/vernesong/OpenClash/core/master/meta/clash-linux-arm64.tar.gz"
        fi

        # 下载并解压 Clash 核心
        curl -sL -m 30 --retry 2 $CLASH_CORE_URL -o /tmp/clash.tar.gz
        tar zxvf /tmp/clash.tar.gz -C /tmp
    
        # 赋予执行权限并移动核心文件到目标目录
        chmod +x /tmp/clash
        mv /tmp/clash files/etc/openclash/core/clash_meta
    
        # 清理临时文件
        rm -rf /tmp/clash.tar.gz
    
        # 下载 GeoIP 数据库文件并移动到目标目录
        curl -sL -m 30 --retry 2 https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat -o /tmp/GeoIP.dat
        mv /tmp/GeoIP.dat files/etc/openclash/GeoIP.dat
    
        # 下载 GeoSite 数据库文件并移动到目标目录
        curl -sL -m 30 --retry 2 https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat -o /tmp/GeoSite.dat
        mv /tmp/GeoSite.dat files/etc/openclash/GeoSite.dat
    
        # 列出核心目录内容，确认文件是否正确放置
        ls -l files/etc/openclash
        ls -l files/etc/openclash/core

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        make defconfig
        export MAKE="gmake"
        echo -e "$(nproc) thread compile with MAKE: $MAKE"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        TARGET_DIRS=$(find openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d)
        NUM_DIRS=$(echo "$TARGET_DIRS" | grep -c .) # Count non-empty lines

        if [ "$NUM_DIRS" -eq 0 ]; then
          echo "Error: Could not find any target directory in openwrt/bin/targets/*/*"
          exit 1
        fi

        if [ "$NUM_DIRS" -gt 1 ]; then
          echo "Warning: Found multiple target directories. Using the first one found ($FIRST_DIR):"
          echo "$TARGET_DIRS"
        fi

        FIRST_DIR=$(echo "$TARGET_DIRS" | head -n 1)
        cd "$FIRST_DIR"
        echo "Changed directory to $PWD"
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.CURRENT_BRANCH }}-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "## OpenWrt Firmware for ${{ env.CURRENT_BRANCH }}" >> release.txt
        echo "Built on: $(date +"%Y-%m-%d %H:%M:%S")" >> release.txt
        echo "Branch: ${{ env.CURRENT_BRANCH }}" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases by branch
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # 获取当前分支名称
        BRANCH="${{ env.CURRENT_BRANCH }}"
        echo "Current branch: $BRANCH"
        
        # 获取该分支的所有release，按创建时间排序
        RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases" | \
          jq -r --arg BRANCH "$BRANCH" '.[] | select(.tag_name | startswith($BRANCH)) | {id: .id, tag_name: .tag_name, created_at: .created_at}' | \
          jq -s 'sort_by(.created_at) | reverse')
        
        # 计算需要删除的release数量
        TOTAL=$(echo "$RELEASES" | jq length)
        TO_KEEP=2
        TO_DELETE=$((TOTAL - TO_KEEP))
        
        if [ $TO_DELETE -gt 0 ]; then
          echo "Found $TOTAL releases for branch $BRANCH, keeping $TO_KEEP, deleting $TO_DELETE"
          
          # 获取要删除的release ID和tag名称
          DELETE_IDS=$(echo "$RELEASES" | jq -r ".[${TO_KEEP}:] | .[].id")
          DELETE_TAGS=$(echo "$RELEASES" | jq -r ".[${TO_KEEP}:] | .[].tag_name")
          
          # 删除旧的release
          for ID in $DELETE_IDS; do
            echo "Deleting release ID: $ID"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$ID"
          done
          
          # 删除对应的tag
          for TAG in $DELETE_TAGS; do
            echo "Deleting tag: $TAG"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG"
          done
        else
          echo "Found $TOTAL releases for branch $BRANCH, keeping all (less than or equal to $TO_KEEP)"
        fi